# Copyright 2024 Specter Ops, Inc.
#
# Licensed under the Apache License, Version 2.0
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

# OpenAPI Spec: https://learn.openapis.org/specification/

openapi: 3.0.3
servers:
  - url: /
    description: This is the base path for all endpoints, relative to the domain where the API is being hosted.
info:
  title: BloodHound API
  contact:
    name: BloodHound Enterprise Support
    url: https://support.bloodhoundenterprise.io/
    email: support@specterops.io
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  version: 'v2'
  description: |
    This is the API that drives BloodHound Enterprise and Community Edition.
    Endpoint availability is denoted using the `Community` and `Enterprise` tags.

    Contact information listed is for BloodHound Enterprise customers. To get help with
    BloodHound Community Edition, please join our
    [Slack community](https://ghst.ly/BHSlack/).

    ## Authentication

    The BloodHound API supports two kinds of authentication: JWT bearer tokens and Signed Requests.
    For quick tests or one-time calls, the JWT used by your browser may be the simplest route. For
    more secure and long lived API integrations, the recommended option is signed requests.

    ### JWT Bearer Token

    The API will accept calls using the following header structure in the HTTP request:
    ```
    Authorization: Bearer $JWT_TOKEN
    ```
    If you open the Network tab within your browser, you will see calls against the API made utilizing
    this structure. JWT bearer tokens are supported by the BloodHound API, however it is recommended
    they only be used for temporary access. JWT tokens expire after a set amount of time and require
    re-authentication using secret credentials.

    ### Signed Requests

    Signed requests are the recommended form of authentication for the BloodHound API. Not only are
    signed requests better for long lived integrations, they also provide more security for the
    requests being sent. They provide authentication of the client, as well as verification of request
    integrity when received by the server.

    Signed requests consist of three main parts: The client token ID, the request timestamp, and a
    base64 encoded HMAC signature. These three pieces of information are sent with the request using
    the following header structure:

    ```
    Authorization: bhesignature $TOKEN_ID
    RequestDate: $RFC3339_DATETIME
    Signature: $BASE64ENCODED_HMAC_SIGNATURE
    ```

    To use signed requests, you will need to generate an API token. Each API token generated in the
    BloodHound API comes with two parts: The Token ID, which is used in the `Authorization` header,
    and the Token Key, which is used as part of the HMAC hashing process. The token ID should be
    considered as public (like a username) and the token key should be considered secret (like a
    password). Once an API token is generated, you can use the key to sign requests.

    For more documentation about how to work with authentication in the API, including examples
    of how to generate an API token in the BloodHound UI, please refer to this support doc:
    [Working with the BloodHound API](https://support.bloodhoundenterprise.io/hc/en-us/articles/11311053342619-Working-with-the-BloodHound-API).

    #### Signed Request Pseudo-code Example

    First, a digest is initiated with HMAC-SHA-256 using the token key as the digest key:
    ```python
    digester = hmac.new(sha256, api_token_key)
    ```

    OperationKey is the first HMAC digest link in the signature chain. This prevents replay attacks that
    seek to modify the request method or URI. It is composed of concatenating the request method and
    the request URI with no delimiter and computing the HMAC digest using the token key as the digest
    secret:
    ```python
    # Example: GET /api/v2/test/resource HTTP/1.1
    # Signature Component: GET/api/v2/test/resource
    digester.write(request_method + request_uri)

    # Update the digester for further chaining
    digester = hmac.New(sha256, digester.hash())
    ```

    DateKey is the next HMAC digest link in the signature chain. This encodes the RFC3339
    formatted datetime value as part of the signature to the hour to prevent replay
    attacks that are older than max two hours. This value is added to the signature chain
    by cutting off all values from the RFC3339 formatted datetime from the hours value
    forward:
    ```python
    # Example: 2020-12-01T23:59:60Z
    # Signature Component: 2020-12-01T23
    request_datetime = date.now()
    digester.write(request_datetime[:13])

    # Update the digester for further chaining
    digester = hmac.New(sha256, digester.hash())
    ```

    Body signing is the last HMAC digest link in the signature chain. This encodes the
    request body as part of the signature to prevent replay attacks that seek to modify
    the payload of a signed request. In the case where there is no body content the
    HMAC digest is computed anyway, simply with no values written to the digester:
    ```python
    if request.body is not empty:
      digester.write(request.body)
    ```

    Finally, base64 encode the final hash and write the three required headers before
    sending the request:
    ```python
    encoded_hash = base64_encode(digester.hash())
    request.header.write('Authorization', 'bhesignature ' + token_id)
    request.header.write('RequestDate', request_datetime)
    request.header.write('Signature', encoded_hash)
    ```

security:
  - JWTBearerToken: []
  - SignedRequest: []
    RequestDate: []
    HMACSignature: []

paths: {}

components:
  ##
  # SECURITY
  ##
  securitySchemes:
    # JWT Bearer token
    JWTBearerToken:
      description: >
        `Authorization: Bearer $JWT_TOKEN`
      type: http
      scheme: Bearer
      bearerFormat: JWT
    # BHE Signature
    SignedRequest:
      description: >
        `Authorization: bhesignature $TOKEN_ID`
      type: apiKey
      name: Authorization
      in: header
    RequestDate:
      description: >
        `RequestDate: $RFC3339_DATETIME`
      type: apiKey
      name: RequestDate
      in: header
    HMACSignature:
      description: >
        `Signature: $BASE64ENCODED_HMAC_SIGNATURE`
      type: apiKey
      name: Signature
      in: header
