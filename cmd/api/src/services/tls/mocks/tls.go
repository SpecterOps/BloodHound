// Copyright 2023 Specter Ops, Inc.
//
// Licensed under the Apache License, Version 2.0
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/specterops/bloodhound/src/services/tls (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -copyright_file=../../../../../LICENSE.header -destination=./mocks/tls.go -package=mocks . Service
//

// Package mocks is a generated GoMock package.
package mocks

import (
	rsa "crypto/rsa"
	x509 "crypto/x509"
	reflect "reflect"

	config "github.com/specterops/bloodhound/src/config"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockService) Parse(cfg config.SAMLConfiguration) (*x509.Certificate, *rsa.PrivateKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", cfg)
	ret0, _ := ret[0].(*x509.Certificate)
	ret1, _ := ret[1].(*rsa.PrivateKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Parse indicates an expected call of Parse.
func (mr *MockServiceMockRecorder) Parse(cfg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockService)(nil).Parse), cfg)
}
