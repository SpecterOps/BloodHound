// Copyright 2023 Specter Ops, Inc.
//
// Licensed under the Apache License, Version 2.0
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/specterops/bloodhound/src/services/fileupload (interfaces: FileUploadData)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/specterops/bloodhound/src/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFileUploadData is a mock of FileUploadData interface.
type MockFileUploadData struct {
	ctrl     *gomock.Controller
	recorder *MockFileUploadDataMockRecorder
}

// MockFileUploadDataMockRecorder is the mock recorder for MockFileUploadData.
type MockFileUploadDataMockRecorder struct {
	mock *MockFileUploadData
}

// NewMockFileUploadData creates a new mock instance.
func NewMockFileUploadData(ctrl *gomock.Controller) *MockFileUploadData {
	mock := &MockFileUploadData{ctrl: ctrl}
	mock.recorder = &MockFileUploadDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileUploadData) EXPECT() *MockFileUploadDataMockRecorder {
	return m.recorder
}

// CancelAllFileUploads mocks base method.
func (m *MockFileUploadData) CancelAllFileUploads(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAllFileUploads", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAllFileUploads indicates an expected call of CancelAllFileUploads.
func (mr *MockFileUploadDataMockRecorder) CancelAllFileUploads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAllFileUploads", reflect.TypeOf((*MockFileUploadData)(nil).CancelAllFileUploads), arg0)
}

// CreateFileUploadJob mocks base method.
func (m *MockFileUploadData) CreateFileUploadJob(arg0 context.Context, arg1 model.FileUploadJob) (model.FileUploadJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileUploadJob", arg0, arg1)
	ret0, _ := ret[0].(model.FileUploadJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileUploadJob indicates an expected call of CreateFileUploadJob.
func (mr *MockFileUploadDataMockRecorder) CreateFileUploadJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileUploadJob", reflect.TypeOf((*MockFileUploadData)(nil).CreateFileUploadJob), arg0, arg1)
}

// DeleteAllFileUploads mocks base method.
func (m *MockFileUploadData) DeleteAllFileUploads(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFileUploads", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllFileUploads indicates an expected call of DeleteAllFileUploads.
func (mr *MockFileUploadDataMockRecorder) DeleteAllFileUploads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFileUploads", reflect.TypeOf((*MockFileUploadData)(nil).DeleteAllFileUploads), arg0)
}

// DeleteAllIngestTasks mocks base method.
func (m *MockFileUploadData) DeleteAllIngestTasks(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllIngestTasks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllIngestTasks indicates an expected call of DeleteAllIngestTasks.
func (mr *MockFileUploadDataMockRecorder) DeleteAllIngestTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllIngestTasks", reflect.TypeOf((*MockFileUploadData)(nil).DeleteAllIngestTasks), arg0)
}

// GetAllFileUploadJobs mocks base method.
func (m *MockFileUploadData) GetAllFileUploadJobs(arg0 context.Context, arg1, arg2 int, arg3 string, arg4 model.SQLFilter) ([]model.FileUploadJob, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFileUploadJobs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]model.FileUploadJob)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllFileUploadJobs indicates an expected call of GetAllFileUploadJobs.
func (mr *MockFileUploadDataMockRecorder) GetAllFileUploadJobs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFileUploadJobs", reflect.TypeOf((*MockFileUploadData)(nil).GetAllFileUploadJobs), arg0, arg1, arg2, arg3, arg4)
}

// GetFileUploadJob mocks base method.
func (m *MockFileUploadData) GetFileUploadJob(arg0 context.Context, arg1 int64) (model.FileUploadJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileUploadJob", arg0, arg1)
	ret0, _ := ret[0].(model.FileUploadJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileUploadJob indicates an expected call of GetFileUploadJob.
func (mr *MockFileUploadDataMockRecorder) GetFileUploadJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileUploadJob", reflect.TypeOf((*MockFileUploadData)(nil).GetFileUploadJob), arg0, arg1)
}

// GetFileUploadJobsWithStatus mocks base method.
func (m *MockFileUploadData) GetFileUploadJobsWithStatus(arg0 context.Context, arg1 model.JobStatus) ([]model.FileUploadJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileUploadJobsWithStatus", arg0, arg1)
	ret0, _ := ret[0].([]model.FileUploadJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileUploadJobsWithStatus indicates an expected call of GetFileUploadJobsWithStatus.
func (mr *MockFileUploadDataMockRecorder) GetFileUploadJobsWithStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileUploadJobsWithStatus", reflect.TypeOf((*MockFileUploadData)(nil).GetFileUploadJobsWithStatus), arg0, arg1)
}

// UpdateFileUploadJob mocks base method.
func (m *MockFileUploadData) UpdateFileUploadJob(arg0 context.Context, arg1 model.FileUploadJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileUploadJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileUploadJob indicates an expected call of UpdateFileUploadJob.
func (mr *MockFileUploadDataMockRecorder) UpdateFileUploadJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileUploadJob", reflect.TypeOf((*MockFileUploadData)(nil).UpdateFileUploadJob), arg0, arg1)
}
