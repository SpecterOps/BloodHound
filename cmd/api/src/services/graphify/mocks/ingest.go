// Code generated by MockGen. DO NOT EDIT.
// Source: ingest.go
//
// Generated by this command:
//
//	mockgen -source=ingest.go -destination=mocks/ingest.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	changelog "github.com/specterops/bloodhound/cmd/api/src/daemons/changelog"
	gomock "go.uber.org/mock/gomock"
)

// MockChangeManager is a mock of ChangeManager interface.
type MockChangeManager struct {
	ctrl     *gomock.Controller
	recorder *MockChangeManagerMockRecorder
	isgomock struct{}
}

// MockChangeManagerMockRecorder is the mock recorder for MockChangeManager.
type MockChangeManagerMockRecorder struct {
	mock *MockChangeManager
}

// NewMockChangeManager creates a new mock instance.
func NewMockChangeManager(ctrl *gomock.Controller) *MockChangeManager {
	mock := &MockChangeManager{ctrl: ctrl}
	mock.recorder = &MockChangeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeManager) EXPECT() *MockChangeManagerMockRecorder {
	return m.recorder
}

// FlushStats mocks base method.
func (m *MockChangeManager) FlushStats() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FlushStats")
}

// FlushStats indicates an expected call of FlushStats.
func (mr *MockChangeManagerMockRecorder) FlushStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushStats", reflect.TypeOf((*MockChangeManager)(nil).FlushStats))
}

// ResolveChange mocks base method.
func (m *MockChangeManager) ResolveChange(change changelog.Change) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveChange", change)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveChange indicates an expected call of ResolveChange.
func (mr *MockChangeManagerMockRecorder) ResolveChange(change any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveChange", reflect.TypeOf((*MockChangeManager)(nil).ResolveChange), change)
}

// Submit mocks base method.
func (m *MockChangeManager) Submit(ctx context.Context, change changelog.Change) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", ctx, change)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Submit indicates an expected call of Submit.
func (mr *MockChangeManagerMockRecorder) Submit(ctx, change any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockChangeManager)(nil).Submit), ctx, change)
}
