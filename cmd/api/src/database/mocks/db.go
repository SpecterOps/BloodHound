// Copyright 2023 Specter Ops, Inc.
//
// Licensed under the Apache License, Version 2.0
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/specterops/bloodhound/src/database (interfaces: Database)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	uuid "github.com/gofrs/uuid"
	model "github.com/specterops/bloodhound/src/model"
	appcfg "github.com/specterops/bloodhound/src/model/appcfg"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AppendAuditLog mocks base method.
func (m *MockDatabase) AppendAuditLog(arg0 context.Context, arg1 model.AuditEntry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendAuditLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendAuditLog indicates an expected call of AppendAuditLog.
func (mr *MockDatabaseMockRecorder) AppendAuditLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendAuditLog", reflect.TypeOf((*MockDatabase)(nil).AppendAuditLog), arg0, arg1)
}

// CancelAllFileUploads mocks base method.
func (m *MockDatabase) CancelAllFileUploads(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelAllFileUploads", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelAllFileUploads indicates an expected call of CancelAllFileUploads.
func (mr *MockDatabaseMockRecorder) CancelAllFileUploads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelAllFileUploads", reflect.TypeOf((*MockDatabase)(nil).CancelAllFileUploads), arg0)
}

// CheckUserHasPermissionToSavedQuery mocks base method.
func (m *MockDatabase) CheckUserHasPermissionToSavedQuery(arg0 context.Context, arg1 int64, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserHasPermissionToSavedQuery", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserHasPermissionToSavedQuery indicates an expected call of CheckUserHasPermissionToSavedQuery.
func (mr *MockDatabaseMockRecorder) CheckUserHasPermissionToSavedQuery(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserHasPermissionToSavedQuery", reflect.TypeOf((*MockDatabase)(nil).CheckUserHasPermissionToSavedQuery), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockDatabase) Close(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabase)(nil).Close), arg0)
}

// CreateADDataQualityAggregation mocks base method.
func (m *MockDatabase) CreateADDataQualityAggregation(arg0 context.Context, arg1 model.ADDataQualityAggregation) (model.ADDataQualityAggregation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateADDataQualityAggregation", arg0, arg1)
	ret0, _ := ret[0].(model.ADDataQualityAggregation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateADDataQualityAggregation indicates an expected call of CreateADDataQualityAggregation.
func (mr *MockDatabaseMockRecorder) CreateADDataQualityAggregation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateADDataQualityAggregation", reflect.TypeOf((*MockDatabase)(nil).CreateADDataQualityAggregation), arg0, arg1)
}

// CreateADDataQualityStats mocks base method.
func (m *MockDatabase) CreateADDataQualityStats(arg0 context.Context, arg1 model.ADDataQualityStats) (model.ADDataQualityStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateADDataQualityStats", arg0, arg1)
	ret0, _ := ret[0].(model.ADDataQualityStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateADDataQualityStats indicates an expected call of CreateADDataQualityStats.
func (mr *MockDatabaseMockRecorder) CreateADDataQualityStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateADDataQualityStats", reflect.TypeOf((*MockDatabase)(nil).CreateADDataQualityStats), arg0, arg1)
}

// CreateAssetGroup mocks base method.
func (m *MockDatabase) CreateAssetGroup(arg0 context.Context, arg1, arg2 string, arg3 bool) (model.AssetGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetGroup", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(model.AssetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAssetGroup indicates an expected call of CreateAssetGroup.
func (mr *MockDatabaseMockRecorder) CreateAssetGroup(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetGroup", reflect.TypeOf((*MockDatabase)(nil).CreateAssetGroup), arg0, arg1, arg2, arg3)
}

// CreateAssetGroupCollection mocks base method.
func (m *MockDatabase) CreateAssetGroupCollection(arg0 context.Context, arg1 model.AssetGroupCollection, arg2 model.AssetGroupCollectionEntries) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAssetGroupCollection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAssetGroupCollection indicates an expected call of CreateAssetGroupCollection.
func (mr *MockDatabaseMockRecorder) CreateAssetGroupCollection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAssetGroupCollection", reflect.TypeOf((*MockDatabase)(nil).CreateAssetGroupCollection), arg0, arg1, arg2)
}

// CreateAuditLog mocks base method.
func (m *MockDatabase) CreateAuditLog(arg0 context.Context, arg1 model.AuditLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuditLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuditLog indicates an expected call of CreateAuditLog.
func (mr *MockDatabaseMockRecorder) CreateAuditLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuditLog", reflect.TypeOf((*MockDatabase)(nil).CreateAuditLog), arg0, arg1)
}

// CreateAuthSecret mocks base method.
func (m *MockDatabase) CreateAuthSecret(arg0 context.Context, arg1 model.AuthSecret) (model.AuthSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthSecret", arg0, arg1)
	ret0, _ := ret[0].(model.AuthSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthSecret indicates an expected call of CreateAuthSecret.
func (mr *MockDatabaseMockRecorder) CreateAuthSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthSecret", reflect.TypeOf((*MockDatabase)(nil).CreateAuthSecret), arg0, arg1)
}

// CreateAuthToken mocks base method.
func (m *MockDatabase) CreateAuthToken(arg0 context.Context, arg1 model.AuthToken) (model.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthToken", arg0, arg1)
	ret0, _ := ret[0].(model.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthToken indicates an expected call of CreateAuthToken.
func (mr *MockDatabaseMockRecorder) CreateAuthToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthToken", reflect.TypeOf((*MockDatabase)(nil).CreateAuthToken), arg0, arg1)
}

// CreateAzureDataQualityAggregation mocks base method.
func (m *MockDatabase) CreateAzureDataQualityAggregation(arg0 context.Context, arg1 model.AzureDataQualityAggregation) (model.AzureDataQualityAggregation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAzureDataQualityAggregation", arg0, arg1)
	ret0, _ := ret[0].(model.AzureDataQualityAggregation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAzureDataQualityAggregation indicates an expected call of CreateAzureDataQualityAggregation.
func (mr *MockDatabaseMockRecorder) CreateAzureDataQualityAggregation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAzureDataQualityAggregation", reflect.TypeOf((*MockDatabase)(nil).CreateAzureDataQualityAggregation), arg0, arg1)
}

// CreateAzureDataQualityStats mocks base method.
func (m *MockDatabase) CreateAzureDataQualityStats(arg0 context.Context, arg1 model.AzureDataQualityStats) (model.AzureDataQualityStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAzureDataQualityStats", arg0, arg1)
	ret0, _ := ret[0].(model.AzureDataQualityStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAzureDataQualityStats indicates an expected call of CreateAzureDataQualityStats.
func (mr *MockDatabaseMockRecorder) CreateAzureDataQualityStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAzureDataQualityStats", reflect.TypeOf((*MockDatabase)(nil).CreateAzureDataQualityStats), arg0, arg1)
}

// CreateFileUploadJob mocks base method.
func (m *MockDatabase) CreateFileUploadJob(arg0 context.Context, arg1 model.FileUploadJob) (model.FileUploadJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileUploadJob", arg0, arg1)
	ret0, _ := ret[0].(model.FileUploadJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileUploadJob indicates an expected call of CreateFileUploadJob.
func (mr *MockDatabaseMockRecorder) CreateFileUploadJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileUploadJob", reflect.TypeOf((*MockDatabase)(nil).CreateFileUploadJob), arg0, arg1)
}

// CreateIngestTask mocks base method.
func (m *MockDatabase) CreateIngestTask(arg0 context.Context, arg1 model.IngestTask) (model.IngestTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIngestTask", arg0, arg1)
	ret0, _ := ret[0].(model.IngestTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIngestTask indicates an expected call of CreateIngestTask.
func (mr *MockDatabaseMockRecorder) CreateIngestTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIngestTask", reflect.TypeOf((*MockDatabase)(nil).CreateIngestTask), arg0, arg1)
}

// CreateInstallation mocks base method.
func (m *MockDatabase) CreateInstallation(arg0 context.Context) (model.Installation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallation", arg0)
	ret0, _ := ret[0].(model.Installation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallation indicates an expected call of CreateInstallation.
func (mr *MockDatabaseMockRecorder) CreateInstallation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallation", reflect.TypeOf((*MockDatabase)(nil).CreateInstallation), arg0)
}

// CreateSAMLIdentityProvider mocks base method.
func (m *MockDatabase) CreateSAMLIdentityProvider(arg0 context.Context, arg1 model.SAMLProvider) (model.SAMLProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSAMLIdentityProvider", arg0, arg1)
	ret0, _ := ret[0].(model.SAMLProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSAMLIdentityProvider indicates an expected call of CreateSAMLIdentityProvider.
func (mr *MockDatabaseMockRecorder) CreateSAMLIdentityProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSAMLIdentityProvider", reflect.TypeOf((*MockDatabase)(nil).CreateSAMLIdentityProvider), arg0, arg1)
}

// CreateSavedQuery mocks base method.
func (m *MockDatabase) CreateSavedQuery(arg0 context.Context, arg1 uuid.UUID, arg2, arg3, arg4 string) (model.SavedQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSavedQuery", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(model.SavedQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSavedQuery indicates an expected call of CreateSavedQuery.
func (mr *MockDatabaseMockRecorder) CreateSavedQuery(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSavedQuery", reflect.TypeOf((*MockDatabase)(nil).CreateSavedQuery), arg0, arg1, arg2, arg3, arg4)
}

// CreateSavedQueryPermissionToPublic mocks base method.
func (m *MockDatabase) CreateSavedQueryPermissionToPublic(arg0 context.Context, arg1 int64) (model.SavedQueriesPermissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSavedQueryPermissionToPublic", arg0, arg1)
	ret0, _ := ret[0].(model.SavedQueriesPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSavedQueryPermissionToPublic indicates an expected call of CreateSavedQueryPermissionToPublic.
func (mr *MockDatabaseMockRecorder) CreateSavedQueryPermissionToPublic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSavedQueryPermissionToPublic", reflect.TypeOf((*MockDatabase)(nil).CreateSavedQueryPermissionToPublic), arg0, arg1)
}

// CreateSavedQueryPermissionToUser mocks base method.
func (m *MockDatabase) CreateSavedQueryPermissionToUser(arg0 context.Context, arg1 int64, arg2 uuid.UUID) (model.SavedQueriesPermissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSavedQueryPermissionToUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.SavedQueriesPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSavedQueryPermissionToUser indicates an expected call of CreateSavedQueryPermissionToUser.
func (mr *MockDatabaseMockRecorder) CreateSavedQueryPermissionToUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSavedQueryPermissionToUser", reflect.TypeOf((*MockDatabase)(nil).CreateSavedQueryPermissionToUser), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockDatabase) CreateUser(arg0 context.Context, arg1 model.User) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDatabaseMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabase)(nil).CreateUser), arg0, arg1)
}

// CreateUserSession mocks base method.
func (m *MockDatabase) CreateUserSession(arg0 context.Context, arg1 model.UserSession) (model.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserSession", arg0, arg1)
	ret0, _ := ret[0].(model.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserSession indicates an expected call of CreateUserSession.
func (mr *MockDatabaseMockRecorder) CreateUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSession", reflect.TypeOf((*MockDatabase)(nil).CreateUserSession), arg0, arg1)
}

// DeleteAllDataQuality mocks base method.
func (m *MockDatabase) DeleteAllDataQuality(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllDataQuality", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllDataQuality indicates an expected call of DeleteAllDataQuality.
func (mr *MockDatabaseMockRecorder) DeleteAllDataQuality(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllDataQuality", reflect.TypeOf((*MockDatabase)(nil).DeleteAllDataQuality), arg0)
}

// DeleteAllFileUploads mocks base method.
func (m *MockDatabase) DeleteAllFileUploads(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllFileUploads", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllFileUploads indicates an expected call of DeleteAllFileUploads.
func (mr *MockDatabaseMockRecorder) DeleteAllFileUploads(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllFileUploads", reflect.TypeOf((*MockDatabase)(nil).DeleteAllFileUploads), arg0)
}

// DeleteAllIngestTasks mocks base method.
func (m *MockDatabase) DeleteAllIngestTasks(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllIngestTasks", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllIngestTasks indicates an expected call of DeleteAllIngestTasks.
func (mr *MockDatabaseMockRecorder) DeleteAllIngestTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllIngestTasks", reflect.TypeOf((*MockDatabase)(nil).DeleteAllIngestTasks), arg0)
}

// DeleteAnalysisRequest mocks base method.
func (m *MockDatabase) DeleteAnalysisRequest(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnalysisRequest", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnalysisRequest indicates an expected call of DeleteAnalysisRequest.
func (mr *MockDatabaseMockRecorder) DeleteAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnalysisRequest", reflect.TypeOf((*MockDatabase)(nil).DeleteAnalysisRequest), arg0)
}

// DeleteAssetGroup mocks base method.
func (m *MockDatabase) DeleteAssetGroup(arg0 context.Context, arg1 model.AssetGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAssetGroup indicates an expected call of DeleteAssetGroup.
func (mr *MockDatabaseMockRecorder) DeleteAssetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetGroup", reflect.TypeOf((*MockDatabase)(nil).DeleteAssetGroup), arg0, arg1)
}

// DeleteAssetGroupSelector mocks base method.
func (m *MockDatabase) DeleteAssetGroupSelector(arg0 context.Context, arg1 model.AssetGroupSelector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetGroupSelector", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAssetGroupSelector indicates an expected call of DeleteAssetGroupSelector.
func (mr *MockDatabaseMockRecorder) DeleteAssetGroupSelector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetGroupSelector", reflect.TypeOf((*MockDatabase)(nil).DeleteAssetGroupSelector), arg0, arg1)
}

// DeleteAssetGroupSelectorsForAssetGroups mocks base method.
func (m *MockDatabase) DeleteAssetGroupSelectorsForAssetGroups(arg0 context.Context, arg1 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAssetGroupSelectorsForAssetGroups", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAssetGroupSelectorsForAssetGroups indicates an expected call of DeleteAssetGroupSelectorsForAssetGroups.
func (mr *MockDatabaseMockRecorder) DeleteAssetGroupSelectorsForAssetGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAssetGroupSelectorsForAssetGroups", reflect.TypeOf((*MockDatabase)(nil).DeleteAssetGroupSelectorsForAssetGroups), arg0, arg1)
}

// DeleteAuthSecret mocks base method.
func (m *MockDatabase) DeleteAuthSecret(arg0 context.Context, arg1 model.AuthSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthSecret indicates an expected call of DeleteAuthSecret.
func (mr *MockDatabaseMockRecorder) DeleteAuthSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthSecret", reflect.TypeOf((*MockDatabase)(nil).DeleteAuthSecret), arg0, arg1)
}

// DeleteAuthToken mocks base method.
func (m *MockDatabase) DeleteAuthToken(arg0 context.Context, arg1 model.AuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthToken indicates an expected call of DeleteAuthToken.
func (mr *MockDatabaseMockRecorder) DeleteAuthToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthToken", reflect.TypeOf((*MockDatabase)(nil).DeleteAuthToken), arg0, arg1)
}

// DeleteIngestTask mocks base method.
func (m *MockDatabase) DeleteIngestTask(arg0 context.Context, arg1 model.IngestTask) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIngestTask", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIngestTask indicates an expected call of DeleteIngestTask.
func (mr *MockDatabaseMockRecorder) DeleteIngestTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIngestTask", reflect.TypeOf((*MockDatabase)(nil).DeleteIngestTask), arg0, arg1)
}

// DeleteSAMLProvider mocks base method.
func (m *MockDatabase) DeleteSAMLProvider(arg0 context.Context, arg1 model.SAMLProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSAMLProvider", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSAMLProvider indicates an expected call of DeleteSAMLProvider.
func (mr *MockDatabaseMockRecorder) DeleteSAMLProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSAMLProvider", reflect.TypeOf((*MockDatabase)(nil).DeleteSAMLProvider), arg0, arg1)
}

// DeleteSavedQuery mocks base method.
func (m *MockDatabase) DeleteSavedQuery(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSavedQuery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSavedQuery indicates an expected call of DeleteSavedQuery.
func (mr *MockDatabaseMockRecorder) DeleteSavedQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedQuery", reflect.TypeOf((*MockDatabase)(nil).DeleteSavedQuery), arg0, arg1)
}

// DeleteSavedQueryPermissionsForUser mocks base method.
func (m *MockDatabase) DeleteSavedQueryPermissionsForUser(arg0 context.Context, arg1 int64, arg2 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSavedQueryPermissionsForUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSavedQueryPermissionsForUser indicates an expected call of DeleteSavedQueryPermissionsForUser.
func (mr *MockDatabaseMockRecorder) DeleteSavedQueryPermissionsForUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedQueryPermissionsForUser", reflect.TypeOf((*MockDatabase)(nil).DeleteSavedQueryPermissionsForUser), arg0, arg1, arg2)
}

// DeleteSavedQueryPermissionsForUsers mocks base method.
func (m *MockDatabase) DeleteSavedQueryPermissionsForUsers(arg0 context.Context, arg1 int64, arg2 []uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSavedQueryPermissionsForUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSavedQueryPermissionsForUsers indicates an expected call of DeleteSavedQueryPermissionsForUsers.
func (mr *MockDatabaseMockRecorder) DeleteSavedQueryPermissionsForUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSavedQueryPermissionsForUsers", reflect.TypeOf((*MockDatabase)(nil).DeleteSavedQueryPermissionsForUsers), arg0, arg1, arg2)
}

// DeleteUser mocks base method.
func (m *MockDatabase) DeleteUser(arg0 context.Context, arg1 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDatabaseMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDatabase)(nil).DeleteUser), arg0, arg1)
}

// EndUserSession mocks base method.
func (m *MockDatabase) EndUserSession(arg0 context.Context, arg1 model.UserSession) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndUserSession", arg0, arg1)
}

// EndUserSession indicates an expected call of EndUserSession.
func (mr *MockDatabaseMockRecorder) EndUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndUserSession", reflect.TypeOf((*MockDatabase)(nil).EndUserSession), arg0, arg1)
}

// GetADDataQualityAggregations mocks base method.
func (m *MockDatabase) GetADDataQualityAggregations(arg0 context.Context, arg1, arg2 time.Time, arg3 string, arg4, arg5 int) (model.ADDataQualityAggregations, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetADDataQualityAggregations", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(model.ADDataQualityAggregations)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetADDataQualityAggregations indicates an expected call of GetADDataQualityAggregations.
func (mr *MockDatabaseMockRecorder) GetADDataQualityAggregations(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetADDataQualityAggregations", reflect.TypeOf((*MockDatabase)(nil).GetADDataQualityAggregations), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetADDataQualityStats mocks base method.
func (m *MockDatabase) GetADDataQualityStats(arg0 context.Context, arg1 string, arg2, arg3 time.Time, arg4 string, arg5, arg6 int) (model.ADDataQualityStats, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetADDataQualityStats", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(model.ADDataQualityStats)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetADDataQualityStats indicates an expected call of GetADDataQualityStats.
func (mr *MockDatabaseMockRecorder) GetADDataQualityStats(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetADDataQualityStats", reflect.TypeOf((*MockDatabase)(nil).GetADDataQualityStats), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetAllAssetGroups mocks base method.
func (m *MockDatabase) GetAllAssetGroups(arg0 context.Context, arg1 string, arg2 model.SQLFilter) (model.AssetGroups, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAssetGroups", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.AssetGroups)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAssetGroups indicates an expected call of GetAllAssetGroups.
func (mr *MockDatabaseMockRecorder) GetAllAssetGroups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAssetGroups", reflect.TypeOf((*MockDatabase)(nil).GetAllAssetGroups), arg0, arg1, arg2)
}

// GetAllAuthTokens mocks base method.
func (m *MockDatabase) GetAllAuthTokens(arg0 context.Context, arg1 string, arg2 model.SQLFilter) (model.AuthTokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAuthTokens", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.AuthTokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAuthTokens indicates an expected call of GetAllAuthTokens.
func (mr *MockDatabaseMockRecorder) GetAllAuthTokens(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAuthTokens", reflect.TypeOf((*MockDatabase)(nil).GetAllAuthTokens), arg0, arg1, arg2)
}

// GetAllConfigurationParameters mocks base method.
func (m *MockDatabase) GetAllConfigurationParameters(arg0 context.Context) (appcfg.Parameters, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllConfigurationParameters", arg0)
	ret0, _ := ret[0].(appcfg.Parameters)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllConfigurationParameters indicates an expected call of GetAllConfigurationParameters.
func (mr *MockDatabaseMockRecorder) GetAllConfigurationParameters(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllConfigurationParameters", reflect.TypeOf((*MockDatabase)(nil).GetAllConfigurationParameters), arg0)
}

// GetAllFileUploadJobs mocks base method.
func (m *MockDatabase) GetAllFileUploadJobs(arg0 context.Context, arg1, arg2 int, arg3 string, arg4 model.SQLFilter) ([]model.FileUploadJob, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFileUploadJobs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]model.FileUploadJob)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllFileUploadJobs indicates an expected call of GetAllFileUploadJobs.
func (mr *MockDatabaseMockRecorder) GetAllFileUploadJobs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFileUploadJobs", reflect.TypeOf((*MockDatabase)(nil).GetAllFileUploadJobs), arg0, arg1, arg2, arg3, arg4)
}

// GetAllFlags mocks base method.
func (m *MockDatabase) GetAllFlags(arg0 context.Context) ([]appcfg.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFlags", arg0)
	ret0, _ := ret[0].([]appcfg.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFlags indicates an expected call of GetAllFlags.
func (mr *MockDatabaseMockRecorder) GetAllFlags(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFlags", reflect.TypeOf((*MockDatabase)(nil).GetAllFlags), arg0)
}

// GetAllIngestTasks mocks base method.
func (m *MockDatabase) GetAllIngestTasks(arg0 context.Context) (model.IngestTasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIngestTasks", arg0)
	ret0, _ := ret[0].(model.IngestTasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIngestTasks indicates an expected call of GetAllIngestTasks.
func (mr *MockDatabaseMockRecorder) GetAllIngestTasks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIngestTasks", reflect.TypeOf((*MockDatabase)(nil).GetAllIngestTasks), arg0)
}

// GetAllPermissions mocks base method.
func (m *MockDatabase) GetAllPermissions(arg0 context.Context, arg1 string, arg2 model.SQLFilter) (model.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPermissions", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPermissions indicates an expected call of GetAllPermissions.
func (mr *MockDatabaseMockRecorder) GetAllPermissions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPermissions", reflect.TypeOf((*MockDatabase)(nil).GetAllPermissions), arg0, arg1, arg2)
}

// GetAllRoles mocks base method.
func (m *MockDatabase) GetAllRoles(arg0 context.Context, arg1 string, arg2 model.SQLFilter) (model.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockDatabaseMockRecorder) GetAllRoles(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockDatabase)(nil).GetAllRoles), arg0, arg1, arg2)
}

// GetAllSAMLProviders mocks base method.
func (m *MockDatabase) GetAllSAMLProviders(arg0 context.Context) (model.SAMLProviders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSAMLProviders", arg0)
	ret0, _ := ret[0].(model.SAMLProviders)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSAMLProviders indicates an expected call of GetAllSAMLProviders.
func (mr *MockDatabaseMockRecorder) GetAllSAMLProviders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSAMLProviders", reflect.TypeOf((*MockDatabase)(nil).GetAllSAMLProviders), arg0)
}

// GetAllUsers mocks base method.
func (m *MockDatabase) GetAllUsers(arg0 context.Context, arg1 string, arg2 model.SQLFilter) (model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockDatabaseMockRecorder) GetAllUsers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockDatabase)(nil).GetAllUsers), arg0, arg1, arg2)
}

// GetAnalysisRequest mocks base method.
func (m *MockDatabase) GetAnalysisRequest(arg0 context.Context) (model.AnalysisRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnalysisRequest", arg0)
	ret0, _ := ret[0].(model.AnalysisRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnalysisRequest indicates an expected call of GetAnalysisRequest.
func (mr *MockDatabaseMockRecorder) GetAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnalysisRequest", reflect.TypeOf((*MockDatabase)(nil).GetAnalysisRequest), arg0)
}

// GetAssetGroup mocks base method.
func (m *MockDatabase) GetAssetGroup(arg0 context.Context, arg1 int32) (model.AssetGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetGroup", arg0, arg1)
	ret0, _ := ret[0].(model.AssetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetGroup indicates an expected call of GetAssetGroup.
func (mr *MockDatabaseMockRecorder) GetAssetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetGroup", reflect.TypeOf((*MockDatabase)(nil).GetAssetGroup), arg0, arg1)
}

// GetAssetGroupCollections mocks base method.
func (m *MockDatabase) GetAssetGroupCollections(arg0 context.Context, arg1 int32, arg2 string, arg3 model.SQLFilter) (model.AssetGroupCollections, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetGroupCollections", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(model.AssetGroupCollections)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetGroupCollections indicates an expected call of GetAssetGroupCollections.
func (mr *MockDatabaseMockRecorder) GetAssetGroupCollections(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetGroupCollections", reflect.TypeOf((*MockDatabase)(nil).GetAssetGroupCollections), arg0, arg1, arg2, arg3)
}

// GetAssetGroupSelector mocks base method.
func (m *MockDatabase) GetAssetGroupSelector(arg0 context.Context, arg1 int32) (model.AssetGroupSelector, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetGroupSelector", arg0, arg1)
	ret0, _ := ret[0].(model.AssetGroupSelector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetGroupSelector indicates an expected call of GetAssetGroupSelector.
func (mr *MockDatabaseMockRecorder) GetAssetGroupSelector(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetGroupSelector", reflect.TypeOf((*MockDatabase)(nil).GetAssetGroupSelector), arg0, arg1)
}

// GetAuthSecret mocks base method.
func (m *MockDatabase) GetAuthSecret(arg0 context.Context, arg1 int32) (model.AuthSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthSecret", arg0, arg1)
	ret0, _ := ret[0].(model.AuthSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthSecret indicates an expected call of GetAuthSecret.
func (mr *MockDatabaseMockRecorder) GetAuthSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthSecret", reflect.TypeOf((*MockDatabase)(nil).GetAuthSecret), arg0, arg1)
}

// GetAuthToken mocks base method.
func (m *MockDatabase) GetAuthToken(arg0 context.Context, arg1 uuid.UUID) (model.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthToken", arg0, arg1)
	ret0, _ := ret[0].(model.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthToken indicates an expected call of GetAuthToken.
func (mr *MockDatabaseMockRecorder) GetAuthToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthToken", reflect.TypeOf((*MockDatabase)(nil).GetAuthToken), arg0, arg1)
}

// GetAzureDataQualityAggregations mocks base method.
func (m *MockDatabase) GetAzureDataQualityAggregations(arg0 context.Context, arg1, arg2 time.Time, arg3 string, arg4, arg5 int) (model.AzureDataQualityAggregations, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureDataQualityAggregations", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(model.AzureDataQualityAggregations)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAzureDataQualityAggregations indicates an expected call of GetAzureDataQualityAggregations.
func (mr *MockDatabaseMockRecorder) GetAzureDataQualityAggregations(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureDataQualityAggregations", reflect.TypeOf((*MockDatabase)(nil).GetAzureDataQualityAggregations), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GetAzureDataQualityStats mocks base method.
func (m *MockDatabase) GetAzureDataQualityStats(arg0 context.Context, arg1 string, arg2, arg3 time.Time, arg4 string, arg5, arg6 int) (model.AzureDataQualityStats, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAzureDataQualityStats", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(model.AzureDataQualityStats)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAzureDataQualityStats indicates an expected call of GetAzureDataQualityStats.
func (mr *MockDatabaseMockRecorder) GetAzureDataQualityStats(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAzureDataQualityStats", reflect.TypeOf((*MockDatabase)(nil).GetAzureDataQualityStats), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// GetConfigurationParameter mocks base method.
func (m *MockDatabase) GetConfigurationParameter(arg0 context.Context, arg1 string) (appcfg.Parameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurationParameter", arg0, arg1)
	ret0, _ := ret[0].(appcfg.Parameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurationParameter indicates an expected call of GetConfigurationParameter.
func (mr *MockDatabaseMockRecorder) GetConfigurationParameter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurationParameter", reflect.TypeOf((*MockDatabase)(nil).GetConfigurationParameter), arg0, arg1)
}

// GetDatapipeStatus mocks base method.
func (m *MockDatabase) GetDatapipeStatus(arg0 context.Context) (model.DatapipeStatusWrapper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatapipeStatus", arg0)
	ret0, _ := ret[0].(model.DatapipeStatusWrapper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatapipeStatus indicates an expected call of GetDatapipeStatus.
func (mr *MockDatabaseMockRecorder) GetDatapipeStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatapipeStatus", reflect.TypeOf((*MockDatabase)(nil).GetDatapipeStatus), arg0)
}

// GetFileUploadJob mocks base method.
func (m *MockDatabase) GetFileUploadJob(arg0 context.Context, arg1 int64) (model.FileUploadJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileUploadJob", arg0, arg1)
	ret0, _ := ret[0].(model.FileUploadJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileUploadJob indicates an expected call of GetFileUploadJob.
func (mr *MockDatabaseMockRecorder) GetFileUploadJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileUploadJob", reflect.TypeOf((*MockDatabase)(nil).GetFileUploadJob), arg0, arg1)
}

// GetFileUploadJobsWithStatus mocks base method.
func (m *MockDatabase) GetFileUploadJobsWithStatus(arg0 context.Context, arg1 model.JobStatus) ([]model.FileUploadJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileUploadJobsWithStatus", arg0, arg1)
	ret0, _ := ret[0].([]model.FileUploadJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileUploadJobsWithStatus indicates an expected call of GetFileUploadJobsWithStatus.
func (mr *MockDatabaseMockRecorder) GetFileUploadJobsWithStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileUploadJobsWithStatus", reflect.TypeOf((*MockDatabase)(nil).GetFileUploadJobsWithStatus), arg0, arg1)
}

// GetFlag mocks base method.
func (m *MockDatabase) GetFlag(arg0 context.Context, arg1 int32) (appcfg.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlag", arg0, arg1)
	ret0, _ := ret[0].(appcfg.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlag indicates an expected call of GetFlag.
func (mr *MockDatabaseMockRecorder) GetFlag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlag", reflect.TypeOf((*MockDatabase)(nil).GetFlag), arg0, arg1)
}

// GetFlagByKey mocks base method.
func (m *MockDatabase) GetFlagByKey(arg0 context.Context, arg1 string) (appcfg.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFlagByKey", arg0, arg1)
	ret0, _ := ret[0].(appcfg.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFlagByKey indicates an expected call of GetFlagByKey.
func (mr *MockDatabaseMockRecorder) GetFlagByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFlagByKey", reflect.TypeOf((*MockDatabase)(nil).GetFlagByKey), arg0, arg1)
}

// GetIngestTasksForJob mocks base method.
func (m *MockDatabase) GetIngestTasksForJob(arg0 context.Context, arg1 int64) (model.IngestTasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIngestTasksForJob", arg0, arg1)
	ret0, _ := ret[0].(model.IngestTasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIngestTasksForJob indicates an expected call of GetIngestTasksForJob.
func (mr *MockDatabaseMockRecorder) GetIngestTasksForJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngestTasksForJob", reflect.TypeOf((*MockDatabase)(nil).GetIngestTasksForJob), arg0, arg1)
}

// GetInstallation mocks base method.
func (m *MockDatabase) GetInstallation(arg0 context.Context) (model.Installation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallation", arg0)
	ret0, _ := ret[0].(model.Installation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallation indicates an expected call of GetInstallation.
func (mr *MockDatabaseMockRecorder) GetInstallation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallation", reflect.TypeOf((*MockDatabase)(nil).GetInstallation), arg0)
}

// GetLatestAssetGroupCollection mocks base method.
func (m *MockDatabase) GetLatestAssetGroupCollection(arg0 context.Context, arg1 int32) (model.AssetGroupCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAssetGroupCollection", arg0, arg1)
	ret0, _ := ret[0].(model.AssetGroupCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAssetGroupCollection indicates an expected call of GetLatestAssetGroupCollection.
func (mr *MockDatabaseMockRecorder) GetLatestAssetGroupCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAssetGroupCollection", reflect.TypeOf((*MockDatabase)(nil).GetLatestAssetGroupCollection), arg0, arg1)
}

// GetPermission mocks base method.
func (m *MockDatabase) GetPermission(arg0 context.Context, arg1 int) (model.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermission", arg0, arg1)
	ret0, _ := ret[0].(model.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermission indicates an expected call of GetPermission.
func (mr *MockDatabaseMockRecorder) GetPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermission", reflect.TypeOf((*MockDatabase)(nil).GetPermission), arg0, arg1)
}

// GetPermissionsForSavedQuery mocks base method.
func (m *MockDatabase) GetPermissionsForSavedQuery(arg0 context.Context, arg1 int64) (model.SavedQueriesPermissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsForSavedQuery", arg0, arg1)
	ret0, _ := ret[0].(model.SavedQueriesPermissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsForSavedQuery indicates an expected call of GetPermissionsForSavedQuery.
func (mr *MockDatabaseMockRecorder) GetPermissionsForSavedQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsForSavedQuery", reflect.TypeOf((*MockDatabase)(nil).GetPermissionsForSavedQuery), arg0, arg1)
}

// GetPublicSavedQueries mocks base method.
func (m *MockDatabase) GetPublicSavedQueries(arg0 context.Context) (model.SavedQueries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicSavedQueries", arg0)
	ret0, _ := ret[0].(model.SavedQueries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicSavedQueries indicates an expected call of GetPublicSavedQueries.
func (mr *MockDatabaseMockRecorder) GetPublicSavedQueries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicSavedQueries", reflect.TypeOf((*MockDatabase)(nil).GetPublicSavedQueries), arg0)
}

// GetRole mocks base method.
func (m *MockDatabase) GetRole(arg0 context.Context, arg1 int32) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockDatabaseMockRecorder) GetRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockDatabase)(nil).GetRole), arg0, arg1)
}

// GetRoles mocks base method.
func (m *MockDatabase) GetRoles(arg0 context.Context, arg1 []int32) (model.Roles, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles", arg0, arg1)
	ret0, _ := ret[0].(model.Roles)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles.
func (mr *MockDatabaseMockRecorder) GetRoles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockDatabase)(nil).GetRoles), arg0, arg1)
}

// GetSAMLProvider mocks base method.
func (m *MockDatabase) GetSAMLProvider(arg0 context.Context, arg1 int32) (model.SAMLProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSAMLProvider", arg0, arg1)
	ret0, _ := ret[0].(model.SAMLProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSAMLProvider indicates an expected call of GetSAMLProvider.
func (mr *MockDatabaseMockRecorder) GetSAMLProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSAMLProvider", reflect.TypeOf((*MockDatabase)(nil).GetSAMLProvider), arg0, arg1)
}

// GetSAMLProviderUsers mocks base method.
func (m *MockDatabase) GetSAMLProviderUsers(arg0 context.Context, arg1 int32) (model.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSAMLProviderUsers", arg0, arg1)
	ret0, _ := ret[0].(model.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSAMLProviderUsers indicates an expected call of GetSAMLProviderUsers.
func (mr *MockDatabaseMockRecorder) GetSAMLProviderUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSAMLProviderUsers", reflect.TypeOf((*MockDatabase)(nil).GetSAMLProviderUsers), arg0, arg1)
}

// GetSavedQuery mocks base method.
func (m *MockDatabase) GetSavedQuery(arg0 context.Context, arg1 int64) (model.SavedQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedQuery", arg0, arg1)
	ret0, _ := ret[0].(model.SavedQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSavedQuery indicates an expected call of GetSavedQuery.
func (mr *MockDatabaseMockRecorder) GetSavedQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedQuery", reflect.TypeOf((*MockDatabase)(nil).GetSavedQuery), arg0, arg1)
}

// GetSharedSavedQueries mocks base method.
func (m *MockDatabase) GetSharedSavedQueries(arg0 context.Context, arg1 uuid.UUID) (model.SavedQueries, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharedSavedQueries", arg0, arg1)
	ret0, _ := ret[0].(model.SavedQueries)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSharedSavedQueries indicates an expected call of GetSharedSavedQueries.
func (mr *MockDatabaseMockRecorder) GetSharedSavedQueries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharedSavedQueries", reflect.TypeOf((*MockDatabase)(nil).GetSharedSavedQueries), arg0, arg1)
}

// GetTimeRangedAssetGroupCollections mocks base method.
func (m *MockDatabase) GetTimeRangedAssetGroupCollections(arg0 context.Context, arg1 int32, arg2, arg3 int64, arg4 string) (model.AssetGroupCollections, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeRangedAssetGroupCollections", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(model.AssetGroupCollections)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeRangedAssetGroupCollections indicates an expected call of GetTimeRangedAssetGroupCollections.
func (mr *MockDatabaseMockRecorder) GetTimeRangedAssetGroupCollections(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeRangedAssetGroupCollections", reflect.TypeOf((*MockDatabase)(nil).GetTimeRangedAssetGroupCollections), arg0, arg1, arg2, arg3, arg4)
}

// GetUser mocks base method.
func (m *MockDatabase) GetUser(arg0 context.Context, arg1 uuid.UUID) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDatabaseMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabase)(nil).GetUser), arg0, arg1)
}

// GetUserSession mocks base method.
func (m *MockDatabase) GetUserSession(arg0 context.Context, arg1 int64) (model.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSession", arg0, arg1)
	ret0, _ := ret[0].(model.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSession indicates an expected call of GetUserSession.
func (mr *MockDatabaseMockRecorder) GetUserSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSession", reflect.TypeOf((*MockDatabase)(nil).GetUserSession), arg0, arg1)
}

// GetUserToken mocks base method.
func (m *MockDatabase) GetUserToken(arg0 context.Context, arg1, arg2 uuid.UUID) (model.AuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.AuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserToken indicates an expected call of GetUserToken.
func (mr *MockDatabaseMockRecorder) GetUserToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserToken", reflect.TypeOf((*MockDatabase)(nil).GetUserToken), arg0, arg1, arg2)
}

// HasAnalysisRequest mocks base method.
func (m *MockDatabase) HasAnalysisRequest(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasAnalysisRequest", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasAnalysisRequest indicates an expected call of HasAnalysisRequest.
func (mr *MockDatabaseMockRecorder) HasAnalysisRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasAnalysisRequest", reflect.TypeOf((*MockDatabase)(nil).HasAnalysisRequest), arg0)
}

// HasCollectedGraphDataDeletionRequest mocks base method.
func (m *MockDatabase) HasCollectedGraphDataDeletionRequest(arg0 context.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCollectedGraphDataDeletionRequest", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCollectedGraphDataDeletionRequest indicates an expected call of HasCollectedGraphDataDeletionRequest.
func (mr *MockDatabaseMockRecorder) HasCollectedGraphDataDeletionRequest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCollectedGraphDataDeletionRequest", reflect.TypeOf((*MockDatabase)(nil).HasCollectedGraphDataDeletionRequest), arg0)
}

// HasInstallation mocks base method.
func (m *MockDatabase) HasInstallation(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasInstallation", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasInstallation indicates an expected call of HasInstallation.
func (mr *MockDatabaseMockRecorder) HasInstallation(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasInstallation", reflect.TypeOf((*MockDatabase)(nil).HasInstallation), arg0)
}

// InitializeSecretAuth mocks base method.
func (m *MockDatabase) InitializeSecretAuth(arg0 context.Context, arg1 model.User, arg2 model.AuthSecret) (model.Installation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeSecretAuth", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Installation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeSecretAuth indicates an expected call of InitializeSecretAuth.
func (mr *MockDatabaseMockRecorder) InitializeSecretAuth(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeSecretAuth", reflect.TypeOf((*MockDatabase)(nil).InitializeSecretAuth), arg0, arg1, arg2)
}

// IsSavedQueryPublic mocks base method.
func (m *MockDatabase) IsSavedQueryPublic(arg0 context.Context, arg1 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSavedQueryPublic", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSavedQueryPublic indicates an expected call of IsSavedQueryPublic.
func (mr *MockDatabaseMockRecorder) IsSavedQueryPublic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSavedQueryPublic", reflect.TypeOf((*MockDatabase)(nil).IsSavedQueryPublic), arg0, arg1)
}

// IsSavedQuerySharedToUser mocks base method.
func (m *MockDatabase) IsSavedQuerySharedToUser(arg0 context.Context, arg1 int64, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSavedQuerySharedToUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSavedQuerySharedToUser indicates an expected call of IsSavedQuerySharedToUser.
func (mr *MockDatabaseMockRecorder) IsSavedQuerySharedToUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSavedQuerySharedToUser", reflect.TypeOf((*MockDatabase)(nil).IsSavedQuerySharedToUser), arg0, arg1, arg2)
}

// ListAuditLogs mocks base method.
func (m *MockDatabase) ListAuditLogs(arg0 context.Context, arg1, arg2 time.Time, arg3, arg4 int, arg5 string, arg6 model.SQLFilter) (model.AuditLogs, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuditLogs", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(model.AuditLogs)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAuditLogs indicates an expected call of ListAuditLogs.
func (mr *MockDatabaseMockRecorder) ListAuditLogs(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuditLogs", reflect.TypeOf((*MockDatabase)(nil).ListAuditLogs), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ListSavedQueries mocks base method.
func (m *MockDatabase) ListSavedQueries(arg0 context.Context, arg1 uuid.UUID, arg2 string, arg3 model.SQLFilter, arg4, arg5 int) (model.SavedQueries, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSavedQueries", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(model.SavedQueries)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSavedQueries indicates an expected call of ListSavedQueries.
func (mr *MockDatabaseMockRecorder) ListSavedQueries(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSavedQueries", reflect.TypeOf((*MockDatabase)(nil).ListSavedQueries), arg0, arg1, arg2, arg3, arg4, arg5)
}

// LookupActiveSessionsByUser mocks base method.
func (m *MockDatabase) LookupActiveSessionsByUser(arg0 context.Context, arg1 model.User) ([]model.UserSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupActiveSessionsByUser", arg0, arg1)
	ret0, _ := ret[0].([]model.UserSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupActiveSessionsByUser indicates an expected call of LookupActiveSessionsByUser.
func (mr *MockDatabaseMockRecorder) LookupActiveSessionsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupActiveSessionsByUser", reflect.TypeOf((*MockDatabase)(nil).LookupActiveSessionsByUser), arg0, arg1)
}

// LookupSAMLProviderByName mocks base method.
func (m *MockDatabase) LookupSAMLProviderByName(arg0 context.Context, arg1 string) (model.SAMLProvider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupSAMLProviderByName", arg0, arg1)
	ret0, _ := ret[0].(model.SAMLProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupSAMLProviderByName indicates an expected call of LookupSAMLProviderByName.
func (mr *MockDatabaseMockRecorder) LookupSAMLProviderByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupSAMLProviderByName", reflect.TypeOf((*MockDatabase)(nil).LookupSAMLProviderByName), arg0, arg1)
}

// LookupUser mocks base method.
func (m *MockDatabase) LookupUser(arg0 context.Context, arg1 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupUser", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookupUser indicates an expected call of LookupUser.
func (mr *MockDatabaseMockRecorder) LookupUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupUser", reflect.TypeOf((*MockDatabase)(nil).LookupUser), arg0, arg1)
}

// Migrate mocks base method.
func (m *MockDatabase) Migrate(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockDatabaseMockRecorder) Migrate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockDatabase)(nil).Migrate), arg0)
}

// RequestAnalysis mocks base method.
func (m *MockDatabase) RequestAnalysis(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAnalysis", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestAnalysis indicates an expected call of RequestAnalysis.
func (mr *MockDatabaseMockRecorder) RequestAnalysis(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAnalysis", reflect.TypeOf((*MockDatabase)(nil).RequestAnalysis), arg0, arg1)
}

// RequestCollectedGraphDataDeletion mocks base method.
func (m *MockDatabase) RequestCollectedGraphDataDeletion(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestCollectedGraphDataDeletion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestCollectedGraphDataDeletion indicates an expected call of RequestCollectedGraphDataDeletion.
func (mr *MockDatabaseMockRecorder) RequestCollectedGraphDataDeletion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestCollectedGraphDataDeletion", reflect.TypeOf((*MockDatabase)(nil).RequestCollectedGraphDataDeletion), arg0, arg1)
}

// SavedQueryBelongsToUser mocks base method.
func (m *MockDatabase) SavedQueryBelongsToUser(arg0 context.Context, arg1 uuid.UUID, arg2 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavedQueryBelongsToUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavedQueryBelongsToUser indicates an expected call of SavedQueryBelongsToUser.
func (mr *MockDatabaseMockRecorder) SavedQueryBelongsToUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavedQueryBelongsToUser", reflect.TypeOf((*MockDatabase)(nil).SavedQueryBelongsToUser), arg0, arg1, arg2)
}

// SetConfigurationParameter mocks base method.
func (m *MockDatabase) SetConfigurationParameter(arg0 context.Context, arg1 appcfg.Parameter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConfigurationParameter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConfigurationParameter indicates an expected call of SetConfigurationParameter.
func (mr *MockDatabaseMockRecorder) SetConfigurationParameter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConfigurationParameter", reflect.TypeOf((*MockDatabase)(nil).SetConfigurationParameter), arg0, arg1)
}

// SetDatapipeStatus mocks base method.
func (m *MockDatabase) SetDatapipeStatus(arg0 context.Context, arg1 model.DatapipeStatus, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDatapipeStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDatapipeStatus indicates an expected call of SetDatapipeStatus.
func (mr *MockDatabaseMockRecorder) SetDatapipeStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDatapipeStatus", reflect.TypeOf((*MockDatabase)(nil).SetDatapipeStatus), arg0, arg1, arg2)
}

// SetFlag mocks base method.
func (m *MockDatabase) SetFlag(arg0 context.Context, arg1 appcfg.FeatureFlag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFlag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFlag indicates an expected call of SetFlag.
func (mr *MockDatabaseMockRecorder) SetFlag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlag", reflect.TypeOf((*MockDatabase)(nil).SetFlag), arg0, arg1)
}

// SetUserSessionFlag mocks base method.
func (m *MockDatabase) SetUserSessionFlag(arg0 context.Context, arg1 *model.UserSession, arg2 model.SessionFlagKey, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserSessionFlag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserSessionFlag indicates an expected call of SetUserSessionFlag.
func (mr *MockDatabaseMockRecorder) SetUserSessionFlag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserSessionFlag", reflect.TypeOf((*MockDatabase)(nil).SetUserSessionFlag), arg0, arg1, arg2, arg3)
}

// SweepAssetGroupCollections mocks base method.
func (m *MockDatabase) SweepAssetGroupCollections(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SweepAssetGroupCollections", arg0)
}

// SweepAssetGroupCollections indicates an expected call of SweepAssetGroupCollections.
func (mr *MockDatabaseMockRecorder) SweepAssetGroupCollections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SweepAssetGroupCollections", reflect.TypeOf((*MockDatabase)(nil).SweepAssetGroupCollections), arg0)
}

// SweepSessions mocks base method.
func (m *MockDatabase) SweepSessions(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SweepSessions", arg0)
}

// SweepSessions indicates an expected call of SweepSessions.
func (mr *MockDatabaseMockRecorder) SweepSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SweepSessions", reflect.TypeOf((*MockDatabase)(nil).SweepSessions), arg0)
}

// UpdateAssetGroup mocks base method.
func (m *MockDatabase) UpdateAssetGroup(arg0 context.Context, arg1 model.AssetGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetGroup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAssetGroup indicates an expected call of UpdateAssetGroup.
func (mr *MockDatabaseMockRecorder) UpdateAssetGroup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetGroup", reflect.TypeOf((*MockDatabase)(nil).UpdateAssetGroup), arg0, arg1)
}

// UpdateAssetGroupSelectors mocks base method.
func (m *MockDatabase) UpdateAssetGroupSelectors(arg0 context.Context, arg1 model.AssetGroup, arg2 []model.AssetGroupSelectorSpec, arg3 bool) (model.UpdatedAssetGroupSelectors, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAssetGroupSelectors", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(model.UpdatedAssetGroupSelectors)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAssetGroupSelectors indicates an expected call of UpdateAssetGroupSelectors.
func (mr *MockDatabaseMockRecorder) UpdateAssetGroupSelectors(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAssetGroupSelectors", reflect.TypeOf((*MockDatabase)(nil).UpdateAssetGroupSelectors), arg0, arg1, arg2, arg3)
}

// UpdateAuthSecret mocks base method.
func (m *MockDatabase) UpdateAuthSecret(arg0 context.Context, arg1 model.AuthSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthSecret indicates an expected call of UpdateAuthSecret.
func (mr *MockDatabaseMockRecorder) UpdateAuthSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthSecret", reflect.TypeOf((*MockDatabase)(nil).UpdateAuthSecret), arg0, arg1)
}

// UpdateAuthToken mocks base method.
func (m *MockDatabase) UpdateAuthToken(arg0 context.Context, arg1 model.AuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthToken indicates an expected call of UpdateAuthToken.
func (mr *MockDatabaseMockRecorder) UpdateAuthToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthToken", reflect.TypeOf((*MockDatabase)(nil).UpdateAuthToken), arg0, arg1)
}

// UpdateFileUploadJob mocks base method.
func (m *MockDatabase) UpdateFileUploadJob(arg0 context.Context, arg1 model.FileUploadJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileUploadJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileUploadJob indicates an expected call of UpdateFileUploadJob.
func (mr *MockDatabaseMockRecorder) UpdateFileUploadJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileUploadJob", reflect.TypeOf((*MockDatabase)(nil).UpdateFileUploadJob), arg0, arg1)
}

// UpdateSAMLIdentityProvider mocks base method.
func (m *MockDatabase) UpdateSAMLIdentityProvider(arg0 context.Context, arg1 model.SAMLProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSAMLIdentityProvider", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSAMLIdentityProvider indicates an expected call of UpdateSAMLIdentityProvider.
func (mr *MockDatabaseMockRecorder) UpdateSAMLIdentityProvider(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSAMLIdentityProvider", reflect.TypeOf((*MockDatabase)(nil).UpdateSAMLIdentityProvider), arg0, arg1)
}

// UpdateSavedQuery mocks base method.
func (m *MockDatabase) UpdateSavedQuery(arg0 context.Context, arg1 model.SavedQuery) (model.SavedQuery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSavedQuery", arg0, arg1)
	ret0, _ := ret[0].(model.SavedQuery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSavedQuery indicates an expected call of UpdateSavedQuery.
func (mr *MockDatabaseMockRecorder) UpdateSavedQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSavedQuery", reflect.TypeOf((*MockDatabase)(nil).UpdateSavedQuery), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockDatabase) UpdateUser(arg0 context.Context, arg1 model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDatabaseMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDatabase)(nil).UpdateUser), arg0, arg1)
}

// Wipe mocks base method.
func (m *MockDatabase) Wipe(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wipe", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wipe indicates an expected call of Wipe.
func (mr *MockDatabaseMockRecorder) Wipe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wipe", reflect.TypeOf((*MockDatabase)(nil).Wipe), arg0)
}
