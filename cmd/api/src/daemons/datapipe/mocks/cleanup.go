// Copyright 2023 Specter Ops, Inc.
//
// Licensed under the Apache License, Version 2.0
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/specterops/bloodhound/src/daemons/datapipe (interfaces: FileOperations)
//
// Generated by this command:
//
//	mockgen -copyright_file=../../../../../LICENSE.header -destination=./mocks/cleanup.go -package=mocks . FileOperations
//

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileOperations is a mock of FileOperations interface.
type MockFileOperations struct {
	ctrl     *gomock.Controller
	recorder *MockFileOperationsMockRecorder
	isgomock struct{}
}

// MockFileOperationsMockRecorder is the mock recorder for MockFileOperations.
type MockFileOperationsMockRecorder struct {
	mock *MockFileOperations
}

// NewMockFileOperations creates a new mock instance.
func NewMockFileOperations(ctrl *gomock.Controller) *MockFileOperations {
	mock := &MockFileOperations{ctrl: ctrl}
	mock.recorder = &MockFileOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOperations) EXPECT() *MockFileOperationsMockRecorder {
	return m.recorder
}

// ReadDir mocks base method.
func (m *MockFileOperations) ReadDir(path string) ([]os.DirEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDir", path)
	ret0, _ := ret[0].([]os.DirEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDir indicates an expected call of ReadDir.
func (mr *MockFileOperationsMockRecorder) ReadDir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDir", reflect.TypeOf((*MockFileOperations)(nil).ReadDir), path)
}

// RemoveAll mocks base method.
func (m *MockFileOperations) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockFileOperationsMockRecorder) RemoveAll(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockFileOperations)(nil).RemoveAll), path)
}
