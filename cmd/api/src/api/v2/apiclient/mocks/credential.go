// Copyright 2023 Specter Ops, Inc.
//
// Licensed under the Apache License, Version 2.0
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/specterops/bloodhound/src/api/v2/apiclient (interfaces: CredentialsHandler)
//
// Generated by this command:
//
//	mockgen -copyright_file=../../../../../../LICENSE.header -destination=./mocks/credential.go -package=mocks . CredentialsHandler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCredentialsHandler is a mock of CredentialsHandler interface.
type MockCredentialsHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsHandlerMockRecorder
	isgomock struct{}
}

// MockCredentialsHandlerMockRecorder is the mock recorder for MockCredentialsHandler.
type MockCredentialsHandlerMockRecorder struct {
	mock *MockCredentialsHandler
}

// NewMockCredentialsHandler creates a new mock instance.
func NewMockCredentialsHandler(ctrl *gomock.Controller) *MockCredentialsHandler {
	mock := &MockCredentialsHandler{ctrl: ctrl}
	mock.recorder = &MockCredentialsHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsHandler) EXPECT() *MockCredentialsHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockCredentialsHandler) Handle(request *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockCredentialsHandlerMockRecorder) Handle(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockCredentialsHandler)(nil).Handle), request)
}
