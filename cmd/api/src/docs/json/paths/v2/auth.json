{
    "/api/v2/accept-eula": {
        "get": {
            "description": "Bloodhound Enterprise only: Accept EULA for logged in user.",
            "tags": [
                "Auth",
                "Enterprise"
            ],
            "summary": "Accept EULA",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "202": {
                    "description": "Accepted"
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/permissions": {
        "get": {
            "description": "List all authorization permissions.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "List Permissions",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                },
                {
                    "type": "string",
                    "description": "Sort by column. Can be used multiple times; prepend hyphen for descending order. Sortable columns are authority, name, id, created_at, updated_at, deleted_at.",
                    "name": "sort_by",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "authority",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "name",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "id",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "created_at",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "updated_at",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "deleted_at",
                    "in": "query",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.ListPermissionsResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/permissions/{permission_id}": {
        "get": {
            "description": "Gets an authorization permission's details.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Get Permission",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                },
                {
                    "type": "string",
                    "description": "ID of the permission record to retrieve details for.",
                    "name": "permission_id",
                    "in": "path",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.PermissionResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/roles": {
        "get": {
            "description": "List all authorization roles.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "List Roles",
            "permissions": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                },
                {
                    "type": "string",
                    "description": "Sort by column. Can be used multiple times; prepend hyphen for descending order. Sortable columns are name, description, id, created_at, updated_at, deleted_at.",
                    "name": "sort_by",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "name",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "id",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "created_at",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "updated_at",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "deleted_at",
                    "in": "query",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.ListRolesResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/roles/{role_id}": {
        "get": {
            "description": "Gets an authorization role's details.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Get Role",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                },
                {
                    "type": "string",
                    "description": "ID of the role record to retrieve info for.",
                    "name": "role_id",
                    "in": "path",
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.RoleResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/saml": {
        "get": {
            "description": "List all registered SAML providers.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "List SAML Providers",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.ListSAMLProvidersResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "api/v2/saml/sso": {
        "get": {
            "description": "Get all SAML sign on endpoints",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Get all SAML sign on endpoints",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],   
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.ListSAMLSignOnEndpoints"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/saml/providers": {
        "post": {
          "description": "Creates a new SAML provider with the given name and metadata XML.",
          "consumes": [
            "multipart/form-data"
          ],
          "tags": [
            "Auth",
            "Community",
            "Enterprise"
          ],
          "summary": "Create a New SAML Provider from Metadata",
          "parameters": [
            {
              "in": "formData",
              "name": "metadata",
              "description": "Metadata XML file.",
              "type": "file",
              "required": true
            },
            {
              "in": "formData",
              "name": "name",
              "description": "Name of the new SAML provider.",
              "type": "string",
              "required": true
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                    "schema": {
                        "$ref": "#/definitions/model.SAMLProvider"
                    }
                }
            }
            },
            "Error": {
                "$ref": "#/components/responses/defaultError"
            }
          }
        }
    },
    "/api/v2/saml/{provider_id}": {
        "parameters": [
            {
                "description": "SAML Provider ID",
                "name": "provider_id",
                "in": "path",
                "required": true
            }
        ],
        "get": {
            "description": "Get the service and identity provider configuration details for a SAML authentication provider.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Get SAML Provider",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.SAMLProviderResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        },
        "delete": {
            "description": "Deletes an existing BloodHound SAML provider.",
            "tags": [
              "Auth",
              "Community",
              "Enterprise"
            ],
            "summary": "Delete a SAML Provider",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
              "200": {
                "description": "OK",
                "schema": {
                  "$ref": "#/definitions/v2.DeleteSAMLProviderResponse"
                }
              },
              "Error": {
                "$ref": "#/components/responses/defaultError"
              }
            }
        }
    },
    "/api/v2/self": {
        "get": {
            "description": "Get the currently authenticated BloodHound user's details.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Lookup Self",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.UserResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/bloodhound-users": {
        "get": {
            "description": "Gets all BloodHound user details.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "List Users",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                },
                {
                    "type": "string",
                    "description": "Sort by column. Can be used multiple times; prepend hyphen for descending order. Sortable columns are first_name, last_name, email_address, principal_name, last_login, created_at, updated_at, deleted_at.",
                    "name": "sort_by",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "first_name",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "last_name",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "email_address",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "principal_name",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "last_login",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "id",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "created_at",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "updated_at",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "deleted_at",
                    "in": "query",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.ListUsersResponse"
                              }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        },
        "post": {
            "description": "Create a new BloodHound user.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Create a New User",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "requestBody": {
                "description": "The request body for creating a user",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/definitions/v2.CreateUserRequest"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.UserResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/bloodhound-users/{user_id}": {
        "parameters": [
            {
                "type": "string",
                "description": "User ID",
                "name": "user_id",
                "in": "path",
                "required": true
            }
        ],
        "get": {
            "description": "Get a BloodHound user's details.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Lookup User",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.UserResponse"
                              }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        },
        "patch": {
            "description": "Update a BloodHound user's properties'.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Update a User",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "requestBody": {
                "description": "The request body for updating a user",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/definitions/v2.UpdateUserRequest"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "OK"
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        },
        "delete": {
            "description": "Deletes an existing BloodHound user.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Delete a User",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK"
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/bloodhound-users/{user_id}/secret": {
        "parameters": [
            {
                "type": "string",
                "description": "User ID",
                "name": "user_id",
                "in": "path",
                "required": true
            }
        ],
        "put": {
            "description": "Create or set a user's secret to use as a login password.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Create or Set User Secret",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "requestBody": {
                "description": "The request body for creating or setting a user secret",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/definitions/v2.SetUserSecretRequest"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "OK"
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        },
        "delete": {
            "description": "Expire a user's secret to use as a login password.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Expire User Secret",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "200": {
                    "description": "Successfully expired user secret"
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/tokens": {
        "get": {
            "description": "Get all auth tokens.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "List Auth Tokens",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                },
                {
                    "type": "string",
                    "description": "Provide a user id to filter tokens by. This filter is only honored for Admin users.",
                    "name": "user_id",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Sort by column. Can be used multiple times; prepend hyphen for descending order. Sortable columns are user_id, client_id, name, last_access, id, created_at, updated_at, deleted_at.",
                    "name": "sort_by",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "name",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "key",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq",
                    "name": "hmac_method",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "last_access",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "id",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "created_at",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "updated_at",
                    "in": "query",
                    "required": false
                },
                {
                    "type": "string",
                    "description": "Filter results by column value. Valid filter predicates are eq, neq, gt, gte, lt, lte",
                    "name": "deleted_at",
                    "in": "query",
                    "required": false
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.ListTokensResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        },
        "post": {
            "description": "Create a new token to use with request signing based authentication for a given user.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Create Token for User",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "requestBody": {
                "description": "The request body for creating an auth token",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/definitions/v2.CreateAuthTokenRequest"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.TokenResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/tokens/{token_id}": {
        "parameters": [
            {
                "type": "string",
                "description": "ID of auth token to delete.",
                "name": "token_id",
                "in": "path",
                "required": true
            }
        ],
        "delete": {
            "description": "Delete a request signing token for a given user.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Delete a User Token",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK"
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/bloodhound-users/{user_id}/mfa": {
        "parameters": [
            {
                "type": "string",
                "description": "User ID",
                "name": "user_id",
                "in": "path",
                "required": true
            }
        ],
        "post": {
            "description": "Enrolls user in multi-factor authentication",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Enrolls user in MFA",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "requestBody": {
                "description": "The request body for enrolling a user in multi-factor authentication",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/definitions/v2.MFAEnrollmentRequest"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.MFAEnrollmentReponse"
                              }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        },
        "delete": {
            "description": "Disenrolls user from multi-factor authentication",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Disenrolls user from multi-factor authentication",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "requestBody": {
                "description": "The disenrolling a user from multi-factor authentication",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/definitions/v2.MFAEnrollmentRequest"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.MFAStatusResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/bloodhound-users/{user_id}/mfa-activation": {
        "parameters": [
            {
                "type": "string",
                "description": "User ID",
                "name": "user_id",
                "in": "path",
                "required": true
            }
        ],
        "get": {
            "description": "Returns multi-factor authentication status for a user",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Returns MFA activation status for a user",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.MFAStatusResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        },
        "post": {
            "description": "Activates multi-factor authentication for an enrolled user",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Activates MFA for an enrolled user",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "requestBody": {
                "description": "The request body for activating multi-factor authentication for an enrolled user",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/definitions/v2.MFAActivationRequest"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.MFAStatusResponse"
                              }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/login": {
        "post": {
            "description": "Login to BloodHound",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Login to BloodHound",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "requestBody": {
                "description": "The request body for logging into the application",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/definitions/v2.LoginRequest"
                        }
                    }
                }
            },
            "responses": {
                "200": {
                    "description": "OK",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/v2.LoginResponse"
                            }
                        }
                    }
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    },
    "/api/v2/logout": {
        "post": {
            "description": "Logout of BloodHound and delete the user session JWT.",
            "tags": [
                "Auth",
                "Community",
                "Enterprise"
            ],
            "summary": "Logout of BloodHound",
            "parameters": [
                {
                    "$ref": "#/definitions/parameters.PreferHeader"
                }
            ],
            "responses": {
                "200": {
                    "description": "OK"
                },
                "Error": {
                    "$ref": "#/components/responses/defaultError"
                }
            }
        }
    }
}
